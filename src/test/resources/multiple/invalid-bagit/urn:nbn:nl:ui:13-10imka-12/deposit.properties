state.label = FAILED
state.description = java.lang.RuntimeException: org.xml.sax.SAXParseException severity=error,count=1\n\tcvc-complex-type.2.4.a: Invalid content was found starting with element 'ddm:accessRights'. One of '{\"http://easy.dans.knaw.nl/schemas/md/ddm/\":available,\"http://easy.dans.knaw.nl/schemas/md/ddm/\":audience}' is expected.\n\tline=25,column=27\n\tnull\norg.xml.sax.SAXParseException severity=warning,count=2\n\tskipped dcterms:identifier at level:3\n\tline=28,column=52\n\tnull\norg.xml.sax.SAXParseException severity=warning,count=3\n\tskipped dcterms:license at level:3\n\tline=33,column=49\n\tnull\norg.xml.sax.SAXParseException severity=warning,count=4\n\tskipped http://purl.org/dc/terms/ rightsHolder [not yet configured/implemented]\n\tline=34,column=67\n\tnull\n\n\tat nl.knaw.dans.easy.stage.dataset.EMD$.getEasyMetadata(EMD.scala:48)\n\tat nl.knaw.dans.easy.stage.dataset.EMD$.create(EMD.scala:38)\n\tat nl.knaw.dans.easy.stage.EasyStageDataset$$anonfun$nl$knaw$dans$easy$stage$EasyStageDataset$$createDatasetSdo$2.apply(EasyStageDataset.scala:76)\n\tat nl.knaw.dans.easy.stage.EasyStageDataset$$anonfun$nl$knaw$dans$easy$stage$EasyStageDataset$$createDatasetSdo$2.apply(EasyStageDataset.scala:74)\n\tat scala.util.Success.flatMap(Try.scala:231)\n\tat nl.knaw.dans.easy.stage.EasyStageDataset$.nl$knaw$dans$easy$stage$EasyStageDataset$$createDatasetSdo(EasyStageDataset.scala:74)\n\tat nl.knaw.dans.easy.stage.EasyStageDataset$$anonfun$run$1$$anonfun$apply$1.apply(EasyStageDataset.scala:65)\n\tat nl.knaw.dans.easy.stage.EasyStageDataset$$anonfun$run$1$$anonfun$apply$1.apply(EasyStageDataset.scala:64)\n\tat scala.util.Success.flatMap(Try.scala:231)\n\tat nl.knaw.dans.easy.stage.EasyStageDataset$$anonfun$run$1.apply(EasyStageDataset.scala:64)\n\tat nl.knaw.dans.easy.stage.EasyStageDataset$$anonfun$run$1.apply(EasyStageDataset.scala:63)\n\tat scala.util.Success.flatMap(Try.scala:231)\n\tat nl.knaw.dans.easy.stage.EasyStageDataset$.run(EasyStageDataset.scala:63)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$.stageDataset(EasyIngestFlow.scala:165)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$3$$anonfun$apply$5.apply(EasyIngestFlow.scala:105)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$3$$anonfun$apply$5.apply(EasyIngestFlow.scala:104)\n\tat scala.util.Success.flatMap(Try.scala:231)\n\tat scala.util.Try$WithFilter.flatMap(Try.scala:139)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$3.apply(EasyIngestFlow.scala:104)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$3.apply(EasyIngestFlow.scala:103)\n\tat scala.util.Success.flatMap(Try.scala:231)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2.apply(EasyIngestFlow.scala:103)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2.apply(EasyIngestFlow.scala:102)\n\tat scala.util.Success.flatMap(Try.scala:231)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1$$anonfun$apply$1.apply(EasyIngestFlow.scala:102)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1$$anonfun$apply$1.apply(EasyIngestFlow.scala:101)\n\tat scala.util.Success.flatMap(Try.scala:231)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1.apply(EasyIngestFlow.scala:101)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$$anonfun$run$1.apply(EasyIngestFlow.scala:100)\n\tat scala.util.Success.flatMap(Try.scala:231)\n\tat nl.knaw.dans.easy.ingest_flow.EasyIngestFlow$.run(EasyIngestFlow.scala:100)\n\tat nl.knaw.dans.easy.ingest_dispatcher.EasyIngestDispatcher$.dispatchIngestFlow(EasyIngestDispatcher.scala:92)\n\tat nl.knaw.dans.easy.ingest_dispatcher.EasyIngestDispatcher$$anonfun$dispatchUnprocessedBags$1.apply(EasyIngestDispatcher.scala:85)\n\tat nl.knaw.dans.easy.ingest_dispatcher.EasyIngestDispatcher$$anonfun$dispatchUnprocessedBags$1.apply(EasyIngestDispatcher.scala:85)\n\tat scala.collection.immutable.List.map(List.scala:277)\n\tat nl.knaw.dans.easy.ingest_dispatcher.EasyIngestDispatcher$.dispatchUnprocessedBags(EasyIngestDispatcher.scala:85)\n\tat nl.knaw.dans.easy.ingest_dispatcher.EasyIngestDispatcher$$anonfun$jobMonitoringStream$2.apply(EasyIngestDispatcher.scala:73)\n\tat nl.knaw.dans.easy.ingest_dispatcher.EasyIngestDispatcher$$anonfun$jobMonitoringStream$2.apply(EasyIngestDispatcher.scala:73)\n\tat rx.lang.scala.Observable$$anon$21.call(Observable.scala:1757)\n\tat rx.internal.operators.OperatorScan$2.onNext(OperatorScan.java:104)\n\tat rx.observers.SerializedObserver.onNext(SerializedObserver.java:159)\n\tat rx.observers.SerializedSubscriber.onNext(SerializedSubscriber.java:95)\n\tat rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber.call(OperatorSampleWithTime.java:104)\n\tat rx.Scheduler$Worker$1.call(Scheduler.java:120)\n\tat rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)
depositor.userId = mendeleydata
